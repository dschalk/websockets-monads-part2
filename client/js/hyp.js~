  class Monad {
    constructor(z) {

      this.x = z;

      this.bnd = (func, ...args) => {
        return func(this.x, this, ...args);
      };

      this.ret = a => {
        this.x = a;
        return this;
      };

      this.fmap = (f, mon = this, ...args) => {      
        mon.ret( f(mon.x, ...args));
        return mon;

      };
    }
  };

  class MonadIter {
    constructor(z,g) {

      this.x = z;
      this.id = g;
      this.p = [];

      this.block = () => {
        this.x = true;
        return this;
        }

      this.release = () => {
        this.x = false;
        let self = this;
        let p = this.p;

        if (p[1] === 'bnd') {
          p[2](self.x, self, ...p[3]);

          return self;
        }

        if (p[1] === 'ret') {
          self.x = p[2];
          return self;
        }

        if (p[1] === 'fmap') { 
          p[3].ret(p[2](p[3].x, ...p[4]));
          return p[3];
        }
     }

      this.bnd = (func, ...args) => {
        let self = this;
        if (self.x === false) {
          func(self.x, self, ...args);
          return self;
        }
        if (self.x === true) {
          self.p = [self.id, 'bnd', func, args];
          return self;
        }
      }

      this.fmap = (f, mon = this, ...args) => {   
        let self = this;
          if (self.x === false) {
            mon.ret(f(mon.x,  ...args));
            return mon;
          }
          if (self.x === true) {
            self.p = [self.id, 'fmap', f, mon, args];
            return self;
          }
      }

      this.ret = a => { 
        let self = this;
          if (self.x === false) {
            self.x = a;
          }
          if (self.x === true) {
          self.p = [self.id, 'ret', a];
          return self;
          }
        this.x = false;
        return this;
      }
    }
  }
let mM1 = new Monad(3);
let mM2 = new Monad(4);
let mMZ7 = new MonadIter(5,'mMZ7');
let hyp = (x,y) => Math.sqrt(x*x + y*y);

let res = hyp(mM1.x, mM2.x);
console.log(res);

function ran(min, max) {
  return Math.round(Math.random() * (max - min) + min);
}
 
setInterval( function() {
 mM1.ret(ran(1,10));
 mM2.ret(ran(1,10));
 mMZ7.block().bnd( => console.log(mM1.x, mM2.x))
 console.log(hyp(mM1.x,mM2.x))
 mM3.bnd(next, ((hyp(mM1.x,mM2.x) - Math.floor(hyp(mM1.x, mM2.x))) === 0),mMZ7)
  },1000 );

var next = function next(x,mon,condition,mon2) {
  if (condition) {
    mon2.release();
  }
  return mon
}

 console.log((hyp(mM1.x,mM2.x) - Math.floor(hyp(mM1.x, mM2.x))) === 0)  )



setInterval( function() {
 mM1.ret(ran(1,6));
 mM2.ret(ran(1,6));
 mMZ7.block().bnd(x => console.log('Success', mM1.x, mM2.x))
 console.log(((hyp(mM1.x,mM2.x) - Math.floor(hyp(mM1.x, mM2.x))) === 0))
 mM3.bnd(next, (hyp(mM1.x,mM2.x) - Math.floor(hyp(mM1.x, mM2.x)) === 0),mMZ7)
  },1000 );
























